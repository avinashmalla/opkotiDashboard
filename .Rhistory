list(label = "San Francisco", value = "SF")),
value = list('MTL', 'SF'),
multi=TRUE
),
htmlLabel('in City Center'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Sauna'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Balcony'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Parking'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Walk-in Closet'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Floor'),
dccSlider(
id = 'floor-slider',
min = 0,
max = length(floorNum) - 1,
marks = floorNum,
value = 4
),
htmlLabel('Text Input'),
dccInput(value='MTL', type='text')
),
style = list(backgroundColor = colors$background)
)
)
app$callback(
output = list(id='graph-with-slider', property='figure'),
params = list(input(id='year-slider', property='value')))
app$run_server()
#
# df %>%
# filter(centrum == 1)%>%
#
#
# print(count(df))
# print(length(df$centrum))
#
# df[df$floor <= 10,]%>%
# count()
#
# # pl <- df %>%
# # filter(floor <= 10) %>%
# # ggplot(aes(factor(hasWalkInCloset),price)) +
# # geom_point(aes(colour = factor(hasBalcony))) +
# # # scale_color_gradient(high = 'red', low = 'blue') +
# # coord_cartesian(xlim = c(0,10), ylim = c(0,1000000))
#
# # print(pl)
#
# pl <- df %>%
# ggplot(aes(x = floor)) +
# geom_histogram(binwidth = 1, colour = 'violet', fill = 'yellow', alpha = 0.6) +
# xlab('Floor') + ylab('Number of houses') + ggtitle('Floor vs Number of houses')
#
#
# pl
#
# pl <- df %>%
# ggplot(aes(x = floor)) +
# geom_histogram(binwidth = 1, aes(fill = ..count.., y = ..density..), colour = 'violet', alpha = 0.6) +
# geom_density(color = 'red') +
# xlab('Floor') + ylab('Number of houses') + ggtitle('Floor vs Number of houses') +
# scale_fill_gradient('Count', low = 'lightblue', high = 'darkgreen')
#
#
# pl
#
# pl <- df %>%
# ggplot(aes(factor(hasSauna))) +
# geom_bar(aes(fill = factor(centrum)), colour = 'black', alpha = 0.6, position = 'fill') +
# xlab('hasSauna?') + ylab('Count') + ggtitle('Do the houses have sauna and if they are located in city centre')
#
# ppl<-ggplotly(pl)
# print(ppl)
#
# length(table(df$city))
F
# # library(dplyr)
# # library(ggplot2)
# # library(readr)
# library(plotly)
# library(tidyverse)
# # library(Amelia)
#
# df <- read_csv('op-koti.csv')
#
# head(df)
#
# # df <- df %>%
# # select(-region, -district)
# any(is.na(df))
#
# head(df)
#
# # df$pricePMsq = df$price / df$totalAreaSize
# df <- df %>%
# mutate(pricePMsq = price/totalAreaSize)
#
# head(df)
#
# i=1
# for (item in colnames(df)){
# #     sprintf(“%d : %d”, i, item)
#     print(paste(i,':',item))
#     i = i + 1
# }
#
# df <- df[c(1,2,4,5,10,11,20,6,7,8,9,3,12:18)]
#
# head(df)
#
# df %>%
# filter(city == 'Oulu') %>%
# group_by(postalCode) %>%
# summarize(AvgPricePMsq = mean(pricePMsq, na.rm = T))
#
# pl <- df %>%
# filter(centrum == 1) %>%
# group_by(city) %>%
# summarize(AvgPricePMsq = mean(pricePMsq, na.rm = T)) %>%
# arrange(desc(AvgPricePMsq))
#
# pl
#
# pl <- df %>%
# filter(centrum == 1) %>%
# group_by(city) %>%
# summarize(AvgPricePMsq = mean(pricePMsq, na.rm = T)) %>%
# arrange(desc(AvgPricePMsq)) %>%
# ggplot(aes(x = city, y = AvgPricePMsq)) +
# geom_bar(stat = 'identity') +
# theme(axis.text.x = element_text(angle = 90))
#
# ppl <- ggplotly(pl)
#
# ppl
# ********** DASH STARTS HERE *************
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
cities <- unique(df$cities)
floorNum <- sort(unique(df$floor))
app <- Dash$new()
colors <- list(
background = '#111111',
text = '#7FDBFF'
)
pageTitle <- htmlH1(
'Hello Dash',
style = list(
textAlign = 'center',
color = colors$text
)
)
pageSubTitle <- htmlDiv(
'Dash for R: A web application framework for R.',
style = list(
textAlign = 'center',
color = colors$text
)
)
app$layout(
htmlDiv(
list(
pageTitle,
pageSubTitle,
htmlLabel('Dropdown'),
dccDropdown(
options = list(list(label = "New York City", value = "NYC"),
list(label = "Montreal", value = "MTL"),
list(label = "San Francisco", value = "SF")),
value = 'MTL'
),
htmlLabel('Multi-Select Dropdown'),
dccDropdown(
options = list(list(label = "New York City", value = "NYC"),
list(label = "Montreal", value = "MTL"),
list(label = "San Francisco", value = "SF")),
value = list('MTL', 'SF'),
multi=TRUE
),
htmlLabel('in City Center'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Sauna'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Balcony'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Parking'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Walk-in Closet'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Floor'),
dccSlider(
id = 'floor-slider',
min = 0,
max = length(floorNum) - 1,
marks = floorNum,
value = 4
),
htmlLabel('Text Input'),
dccInput(value='MTL', type='text')
),
style = list(backgroundColor = colors$background)
)
)
app$callback(
output = list(id='graph-with-slider', property='figure'),
params = list(input(id='year-slider', property='value')))
app$run_server()
#
# df %>%
# filter(centrum == 1)%>%
#
#
# print(count(df))
# print(length(df$centrum))
#
# df[df$floor <= 10,]%>%
# count()
#
# # pl <- df %>%
# # filter(floor <= 10) %>%
# # ggplot(aes(factor(hasWalkInCloset),price)) +
# # geom_point(aes(colour = factor(hasBalcony))) +
# # # scale_color_gradient(high = 'red', low = 'blue') +
# # coord_cartesian(xlim = c(0,10), ylim = c(0,1000000))
#
# # print(pl)
#
# pl <- df %>%
# ggplot(aes(x = floor)) +
# geom_histogram(binwidth = 1, colour = 'violet', fill = 'yellow', alpha = 0.6) +
# xlab('Floor') + ylab('Number of houses') + ggtitle('Floor vs Number of houses')
#
#
# pl
#
# pl <- df %>%
# ggplot(aes(x = floor)) +
# geom_histogram(binwidth = 1, aes(fill = ..count.., y = ..density..), colour = 'violet', alpha = 0.6) +
# geom_density(color = 'red') +
# xlab('Floor') + ylab('Number of houses') + ggtitle('Floor vs Number of houses') +
# scale_fill_gradient('Count', low = 'lightblue', high = 'darkgreen')
#
#
# pl
#
# pl <- df %>%
# ggplot(aes(factor(hasSauna))) +
# geom_bar(aes(fill = factor(centrum)), colour = 'black', alpha = 0.6, position = 'fill') +
# xlab('hasSauna?') + ylab('Count') + ggtitle('Do the houses have sauna and if they are located in city centre')
#
# ppl<-ggplotly(pl)
# print(ppl)
#
# length(table(df$city))
# # library(dplyr)
# # library(ggplot2)
# # library(readr)
# library(plotly)
# library(tidyverse)
# # library(Amelia)
#
# df <- read_csv('op-koti.csv')
#
# head(df)
#
# # df <- df %>%
# # select(-region, -district)
# any(is.na(df))
#
# head(df)
#
# # df$pricePMsq = df$price / df$totalAreaSize
# df <- df %>%
# mutate(pricePMsq = price/totalAreaSize)
#
# head(df)
#
# i=1
# for (item in colnames(df)){
# #     sprintf(“%d : %d”, i, item)
#     print(paste(i,':',item))
#     i = i + 1
# }
#
# df <- df[c(1,2,4,5,10,11,20,6,7,8,9,3,12:18)]
#
# head(df)
#
# df %>%
# filter(city == 'Oulu') %>%
# group_by(postalCode) %>%
# summarize(AvgPricePMsq = mean(pricePMsq, na.rm = T))
#
# pl <- df %>%
# filter(centrum == 1) %>%
# group_by(city) %>%
# summarize(AvgPricePMsq = mean(pricePMsq, na.rm = T)) %>%
# arrange(desc(AvgPricePMsq))
#
# pl
#
# pl <- df %>%
# filter(centrum == 1) %>%
# group_by(city) %>%
# summarize(AvgPricePMsq = mean(pricePMsq, na.rm = T)) %>%
# arrange(desc(AvgPricePMsq)) %>%
# ggplot(aes(x = city, y = AvgPricePMsq)) +
# geom_bar(stat = 'identity') +
# theme(axis.text.x = element_text(angle = 90))
#
# ppl <- ggplotly(pl)
#
# ppl
# ********** DASH STARTS HERE *************
library(dash)
library(dashCoreComponents)
library(dashHtmlComponents)
cities <- unique(df$cities)
floorNum <- sort(unique(df$floor))
app <- Dash$new()
colors <- list(
background = '#111111',
text = '#7FDBFF'
)
pageTitle <- htmlH1(
'Hello Dash',
style = list(
textAlign = 'center',
color = colors$text
)
)
pageSubTitle <- htmlDiv(
'Dash for R: A web application framework for R.',
style = list(
textAlign = 'center',
color = colors$text
)
)
app$layout(
htmlDiv(
list(
pageTitle,
pageSubTitle,
htmlLabel('Dropdown'),
dccDropdown(
options = list(list(label = "New York City", value = "NYC"),
list(label = "Montreal", value = "MTL"),
list(label = "San Francisco", value = "SF")),
value = 'MTL'
),
htmlLabel('Multi-Select Dropdown'),
dccDropdown(
options = list(list(label = "New York City", value = "NYC"),
list(label = "Montreal", value = "MTL"),
list(label = "San Francisco", value = "SF")),
value = list('MTL', 'SF'),
multi=TRUE
),
htmlLabel('in City Center'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Sauna'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Balcony'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Parking'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Walk-in Closet'),
dccRadioItems(
options = list(list(label = "Yes", value = "1"),
list(label = "No", value = "0")),
value = '0'
),
htmlLabel('Floor'),
dccSlider(
id = 'floor-slider',
min = 0,
max = length(floorNum) - 1,
marks = floorNum,
value = 4
),
htmlLabel('Text Input'),
dccInput(value='MTL', type='text')
),
style = list(backgroundColor = 'FFF111')
)
)
app$callback(
output = list(id='graph-with-slider', property='figure'),
params = list(input(id='year-slider', property='value')))
app$run_server()
#
# df %>%
# filter(centrum == 1)%>%
#
#
# print(count(df))
# print(length(df$centrum))
#
# df[df$floor <= 10,]%>%
# count()
#
# # pl <- df %>%
# # filter(floor <= 10) %>%
# # ggplot(aes(factor(hasWalkInCloset),price)) +
# # geom_point(aes(colour = factor(hasBalcony))) +
# # # scale_color_gradient(high = 'red', low = 'blue') +
# # coord_cartesian(xlim = c(0,10), ylim = c(0,1000000))
#
# # print(pl)
#
# pl <- df %>%
# ggplot(aes(x = floor)) +
# geom_histogram(binwidth = 1, colour = 'violet', fill = 'yellow', alpha = 0.6) +
# xlab('Floor') + ylab('Number of houses') + ggtitle('Floor vs Number of houses')
#
#
# pl
#
# pl <- df %>%
# ggplot(aes(x = floor)) +
# geom_histogram(binwidth = 1, aes(fill = ..count.., y = ..density..), colour = 'violet', alpha = 0.6) +
# geom_density(color = 'red') +
# xlab('Floor') + ylab('Number of houses') + ggtitle('Floor vs Number of houses') +
# scale_fill_gradient('Count', low = 'lightblue', high = 'darkgreen')
#
#
# pl
#
# pl <- df %>%
# ggplot(aes(factor(hasSauna))) +
# geom_bar(aes(fill = factor(centrum)), colour = 'black', alpha = 0.6, position = 'fill') +
# xlab('hasSauna?') + ylab('Count') + ggtitle('Do the houses have sauna and if they are located in city centre')
#
# ppl<-ggplotly(pl)
# print(ppl)
#
# length(table(df$city))
install.packages('flexdashboard')
exit()
q()
shiny::runApp('~/Documents/GitHub/opKotiDashboard')
jupyter notebook
exit()
exit
q()
setwd("~/Documents/GitHub/opkotiDashboard")
q()
shiny::runApp()
jupyter notebook
runapp()
shiny::runApp()
