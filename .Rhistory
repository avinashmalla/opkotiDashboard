mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 3) +
geom_text(aes(label=ifelse(mbage<30,as.character(city),'')),hjust=0, vjust=0) +
xlab('Avg Building Age') + ylab('Average Price per meter sq')
pl2<-ggplotly(pricePMsq_buildingAge)
pl2
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 0.6) +
geom_text(aes(label=ifelse(mbage<30,as.character(city),'')),hjust=0, vjust=0) +
xlab('Avg Building Age') + ylab('Average Price per meter sq')
pl2<-ggplotly(pricePMsq_buildingAge)
pl2
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_text(aes(label=ifelse(mbage<30,as.character(city),'')),hjust=0, vjust=0) +
xlab('Avg Building Age') + ylab('Average Price per meter sq')
pl2<-ggplotly(pricePMsq_buildingAge)
pl2
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
# geom_text(aes(label=ifelse(mbage<30,as.character(city),'')),hjust=0, vjust=0) +
xlab('Avg Building Age') + ylab('Average Price per meter sq')
pl2<-ggplotly(pricePMsq_buildingAge)
pl2
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq')
pl2<-ggplotly(pricePMsq_buildingAge)
pl2
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pl2<-ggplotly(pricePMsq_buildingAge)
pl2
pricePMsq_buildingAge
pricePMsq_buildingAge
pl2<-ggplotly(pricePMsq_buildingAge)
pl2
pricePMsq_buildingAge
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
labs(title = "max.overlaps = Inf") +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 15
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 15,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 25,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 50,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 40,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 30,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 20,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 25,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge
pricePMsq_buildingAge <- by_city %>%
summarise(
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 27,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
pricePMsq_buildingAge
mppmsq = mean(pricePMsq),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mppmsq, label = city)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 25,
segment.color = 'grey50') +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
theme_classic()
price_buildingAge <- by_city %>%
summarise(
mp = mean(price),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage)) +
geom_point(col="blue", alpha = 0.6, size = 1) +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 25,
segment.color = 'grey50') +
theme_classic()
price_buildingAge
price_buildingAge <- by_city %>%
summarise(
mp = mean(price),
mbage = mean(buildingAge))%>%
ggplot(aes(x = mbage, y = mp, label = city)) +
geom_point(col="red", alpha = 0.6, size = 1) +
xlab('Avg Building Age') + ylab('Average Price per meter sq') +
geom_label_repel(aes(label = city),
box.padding   = 0.35,
point.padding = 0.5,
max.overlaps = 25,
segment.color = 'grey50') +
theme_classic()
price_buildingAge
setwd("~/Documents/GitHub/op-koti")
library(shiny)
library(tidyverse)
library(shinydashboard)
df <- read_csv('op-koti.csv')
runApp('opKotiDashboard')
getwd()
df <- read_csv('op-koti.csv')
runApp('opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
df[df$city == 'Oulu']$district
df[df$city == 'Oulu']$district
df[df$city == 'Oulu']
df[df$city == 'Oulu']
df[df$city == 'Oulu',]
df[df$city == 'Oulu',]$district
runApp('~/Documents/GitHub/opKotiDashboard')
df %>%
filter(city == input$cit) %>%
select(district)
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp()
runApp('~/Documents/GitHub/opKotiDashboard')
runApp()
runApp('~/Documents/GitHub/opKotiDashboard')
df %>%
filter(city == "Oulu") %>%
select(district)
l <- df %>%
filter(city == 'Oulu') %>%
select(district)
l
class(l)
x <- df[df$city == 'Oulu']$district
df[df$city == 'Oulu']$district
x <- df[df$city == 'Oulu']
df[df$city == "Oulu"]$district
df[df$city == "Oulu"]
l
list(l)
l[[]]
l[]
df[df$centrum == 0]
rlang::last_error()
df[df$centrum == '0']
class(L)
class(l)
class(l[])
df[df$city == "Oulu",]
df[df$city == "Oulu",]$district
runApp('~/Documents/GitHub/opKotiDashboard')
input_city = 'Oulu'
df[df$city == input_city,]$district
unique(df[df$city == input_city,]$district)
runApp('~/Documents/GitHub/opKotiDashboard')
l <- df %>%
filter(city == input_city)%>%
select(district)
l
l[]
l[;]
l[,]
l <- as.vector(l)
l
class(l)
l[]
l <- as.vector(l[])
class(l)
l
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
runApp('~/Documents/GitHub/opKotiDashboard')
distinct(df$listingType)
distinct(df$listingType)
table(df$listingType)
#
#     server <- function(input, output, session) {
#         output$txt <- renderText({
#             icons <- paste(input$icons, collapse = ", ")
#             paste("You chose", icons)
#         })
#     }
#
#     shinyApp(ui, server)
# }
df[df$listingType == "Kytketty paritalo"]
#
#     server <- function(input, output, session) {
#         output$txt <- renderText({
#             icons <- paste(input$icons, collapse = ", ")
#             paste("You chose", icons)
#         })
#     }
#
#     shinyApp(ui, server)
# }
df[df$listingType == "Kytketty paritalo",]
#
#     server <- function(input, output, session) {
#         output$txt <- renderText({
#             icons <- paste(input$icons, collapse = ", ")
#             paste("You chose", icons)
#         })
#     }
#
#     shinyApp(ui, server)
# }
df[df$listingType == "Kytketty paritalo",] = Paritalo
#
#     server <- function(input, output, session) {
#         output$txt <- renderText({
#             icons <- paste(input$icons, collapse = ", ")
#             paste("You chose", icons)
#         })
#     }
#
#     shinyApp(ui, server)
# }
df[df$listingType == "Kytketty paritalo",] = 'Paritalo'
#
#     server <- function(input, output, session) {
#         output$txt <- renderText({
#             icons <- paste(input$icons, collapse = ", ")
#             paste("You chose", icons)
#         })
#     }
#
#     shinyApp(ui, server)
# }
df[df$listingType == "Kytketty paritalo",]$listingType = 'Paritalo'
table(df$listingType)
df <- read_csv('op-koti.csv')
df[df$listingType == "Kytketty paritalo",]$listingType = 'Paritalo'
getwd()
setwd("~/Documents/GitHub/opKotiDashboard")
df <- read_csv('op-koti.csv')
df[df$listingType == "Kytketty paritalo",]$listingType = 'Paritalo'
runApp()
runApp()
runApp()
runApp()
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "Analyzing housing data"),
dashboardSidebar(
sidebarMenu(
menuItem("Graphs",
tabName = "graphs-tab",
icon = icon("chart-line")),
menuItem("Tables",
tabName = "tables-tab",
icon = icon("table"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "graphs-tab",
box(title = "Enter postal code or city name" ,
selectInput("postcode",
"Postal Code:",
c("All",
unique(as.character(df$postalCode))),
multiple = T,
selectize = T),
hr(style = "border-top: 2px solid #D8DBE2;"),
selectInput(inputId = "cit",
label = "City:",
choices = c("None",unique(as.character(df$city))),
multiple = F,
selectize = T),
selectInput("dist",
"District:",
choices = c("None","Select city from above field first"),
multiple = F,
selectize = T,
selected = NULL),
sliderInput(inputId = "floor-slider",
label = "Select Floor",
min = 0,
max = 14,
value = 4)),
box(checkboxGroupInput("amenities", "Choose amenities:",
choiceNames =list("Centrum","Sauna","Balcony","Parking","Walk-in Closet","StorageRoom"),
choiceValues =
list("centrum", "sauna", "balcony", "parking", "walkincloset","storageroom")),
checkboxGroupInput("house-type", "Choose house type:",
choices =c(unique(as.character(df$listingType)))
))
),
tabItem(tabName = "tables-tab")
)
)
)
runApp()
unique(as.character(df$floor))
c(unique(as.character(df$floor)))
runApp()
runApp()
runApp()
runApp()
runApp()
unique(df$floor)
fl <- unique(df$floor)
min(fl)
runApp()
runApp()
df %>%
filter(postalCode == "90120")
df %>%
filter(postalCode == "90120") %>%
filter(district == "Keskusta")
df %>%
filter(postalCode == "90120") %>%
filter(hasSauna == 1)
runApp()
runApp()
runApp()
library(DT)
runApp()
runApp()
getwd()
df <- read_csv('forDash.csv')
runApp()
runApp()
runApp()
runApp()
df %>%
filter(postalCode == c(90100,90120))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q()
